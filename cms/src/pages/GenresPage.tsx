import React, { useEffect, useState } from 'react';import {  Table,  Button,  Space,  message,  Popconfirm,  Typography,  Tag,  Card,  Row,  Col,  Image,} from 'antd';import {  PlusOutlined,  EditOutlined,  DeleteOutlined,  ReloadOutlined,  EyeOutlined,} from '@ant-design/icons';import { useNavigate } from 'react-router-dom';import {   genreService,   Genre,   GenreStatus } from '../services/genreService';import { usePermissions } from '../hooks/usePermissions';import type { ColumnsType } from 'antd/es/table';const { Title } = Typography;const GenresPage: React.FC = () => {  const navigate = useNavigate();  const { canCreate, canEdit, canDelete } = usePermissions();  const [genres, setGenres] = useState<Genre[]>([]);  const [loading, setLoading] = useState(false);  useEffect(() => {    fetchGenres();  }, []);  const fetchGenres = async () => {    try {      setLoading(true);      const data = await genreService.getAll();      setGenres(data);    } catch (error) {      message.error('Failed to fetch genres');      console.error('Error fetching genres:', error);    } finally {      setLoading(false);    }  };  const handleCreate = () => {    navigate('/genres/create');  };  const handleEdit = (genre: Genre) => {    navigate(`/genres/edit/${genre.genreId}`);  };  const handleDelete = async (genreId: number) => {    try {      setLoading(true);      await genreService.delete(genreId);      message.success('Genre deleted successfully');      fetchGenres();    } catch (error) {      message.error('Failed to delete genre');      console.error('Error deleting genre:', error);    } finally {      setLoading(false);    }  };  const columns: ColumnsType<Genre> = [    {      title: 'Icon',      dataIndex: 'iconUrl',      key: 'iconUrl',      width: 80,      render: (iconUrl: string, record: Genre) => (        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>          {iconUrl ? (            <Image              width={32}              height={32}              src={iconUrl}              preview={false}              style={{ borderRadius: '6px' }}              fallback="/placeholder-icon.png"            />          ) : (            <div               style={{                 width: 32,                 height: 32,                 backgroundColor: record.colorCode || '#f0f0f0',                borderRadius: 6,                display: 'flex',                alignItems: 'center',                justifyContent: 'center',                color: 'white',                fontWeight: 'bold',                fontSize: '12px'              }}            >              {record.genreName?.charAt(0)?.toUpperCase() || '?'}            </div>          )}        </div>      ),    },    {      title: 'Genre Name',      dataIndex: 'genreName',      key: 'genreName',      sorter: (a, b) => a.genreName.localeCompare(b.genreName),      render: (genreName: string, record: Genre) => (        <Space direction="vertical" size={0}>          <span style={{ fontWeight: 500 }}>{genreName}</span>          {record.description && (            <span style={{ fontSize: '12px', color: '#666' }}>              {record.description.length > 50                 ? `${record.description.substring(0, 50)}...`                 : record.description}            </span>          )}        </Space>      ),    },    {      title: 'Status',      dataIndex: 'status',      key: 'status',      width: 120,      filters: [        { text: 'Active', value: GenreStatus.ACTIVE },        { text: 'Inactive', value: GenreStatus.INACTIVE },        { text: 'Hidden', value: GenreStatus.HIDDEN },      ],      onFilter: (value, record) => record.status === value,      render: (status: GenreStatus) => {        const colorMap = {          [GenreStatus.ACTIVE]: 'green',          [GenreStatus.INACTIVE]: 'red',          [GenreStatus.HIDDEN]: 'gray',        };        return (          <Tag color={colorMap[status]}>            {status.toUpperCase()}          </Tag>        );      },    },    {      title: 'Features',      key: 'features',      width: 120,      render: (_, record: Genre) => (        <Space>          {record.isFeatured && (            <Tag color="purple" title="Featured Genre">              Featured            </Tag>          )}        </Space>      ),    },    {      title: 'Sort Order',      dataIndex: 'sortOrder',      key: 'sortOrder',      width: 100,      sorter: (a, b) => (a.sortOrder || 0) - (b.sortOrder || 0),      render: (sortOrder: number) => sortOrder || 0,    },    {      title: 'Actions',      key: 'actions',      width: 150,      render: (_, record: Genre) => (        <Space size="small">          {canEdit('genres') && (            <Button              type="primary"              size="small"              icon={<EditOutlined />}              onClick={() => handleEdit(record)}            >              Edit            </Button>          )}          {canDelete('genres') && (            <Popconfirm              title="Delete Genre"              description="Are you sure you want to delete this genre?"              onConfirm={() => handleDelete(record.genreId)}              okText="Yes"              cancelText="No"            >              <Button                type="primary"                danger                size="small"                icon={<DeleteOutlined />}              >                Delete              </Button>            </Popconfirm>          )}        </Space>      ),    },  ];  return (    <div style={{ padding: '24px' }}>      <Row justify="space-between" align="middle" style={{ marginBottom: 24 }}>        <Col>          <Title level={2}>Genres Management</Title>        </Col>        <Col>          <Space>            <Button              icon={<ReloadOutlined />}              onClick={fetchGenres}              loading={loading}            >              Refresh            </Button>            {canCreate('genres') && (              <Button                type="primary"                icon={<PlusOutlined />}                onClick={handleCreate}              >                Add Genre              </Button>            )}          </Space>        </Col>      </Row>      <Card>        <Table          columns={columns}          dataSource={genres}          rowKey="genreId"          loading={loading}          pagination={{            total: genres.length,            pageSize: 10,            showSizeChanger: true,            showQuickJumper: true,            showTotal: (total, range) =>              `${range[0]}-${range[1]} of ${total} genres`,          }}          scroll={{ x: 800 }}        />      </Card>    </div>  );};export default GenresPage;